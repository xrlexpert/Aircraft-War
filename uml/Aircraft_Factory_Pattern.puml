@startuml
abstract class AbstractEnemyAircraft
 {
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {abstract}createItems(): List<BaseItem>
 }
class MobEnemy{
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + createItems(): List<BaseItem>
}
class EliteEnemy{
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + createItems(): List<BaseItem>
}
class ElitePlusEnemy{
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + createItems(): List<BaseItem>
}
class BossEnemy{
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + createItems(): List<BaseItem>
}
interface EnemyAircraftFactory{
    +{abstract} createEnemyAircraft(): AbstractEnemyAircraft
}
class EliteEnemyFactory{
    + createAircraft():AbstractAircraft
}
class MobEnemyFactory{
    + createAircraft():AbstractAircraft
}
class ElitePlusEnemyFactory{
    + createAircraft():AbstractAircraft
}
class BossEnemyFactory{
    + createAircraft():AbstractAircraft
}
AbstractEnemyAircraft <-- EnemyAircraftFactory
AbstractEnemyAircraft <|-- MobEnemy
AbstractEnemyAircraft <|-- EliteEnemy
AbstractEnemyAircraft <|-- ElitePlusEnemy
AbstractEnemyAircraft <|-- BossEnemy

EnemyAircraftFactory <|.. MobEnemyFactory
EnemyAircraftFactory <|.. EliteEnemyFactory
EnemyAircraftFactory <|.. ElitePlusEnemyFactory
EnemyAircraftFactory <|.. BossEnemyFactory
@enduml
